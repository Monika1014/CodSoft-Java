import java.util.*;

class Course {
    String courseCode;
    String courseTitle;
    String description;
    int capacity;
    int enrolled;

    public Course(String courseCode, String courseTitle, String description, int capacity) {
        this.courseCode = courseCode;
        this.courseTitle = courseTitle;
        this.description = description;
        this.capacity = capacity;
        this.enrolled = 0;
    }

    public boolean isAvailable() {
        return enrolled < capacity;
    }

    public void enroll() {
        if (isAvailable()) {
            enrolled++;
        }
    }

    public void drop() {
        if (enrolled > 0) {
            enrolled--;
        }
    }

    public void display() {
        System.out.println("Course Code: " + courseCode);
        System.out.println("Course Title: " + courseTitle);
        System.out.println("Description: " + description);
        System.out.println("Capacity: " + capacity);
        System.out.println("Enrolled: " + enrolled);
        System.out.println("Available Slots: " + (capacity - enrolled));
    }
}

class Student {
    String studentId;
    String name;
    List<Course> registeredCourses;

    public Student(String studentId, String name) {
        this.studentId = studentId;
        this.name = name;
        this.registeredCourses = new ArrayList<>();
    }

    public void registerCourse(Course course) {
        if (course.isAvailable()) {
            course.enroll();
            registeredCourses.add(course);
            System.out.println(name + " successfully registered for " + course.courseTitle);
        } else {
            System.out.println("Sorry, " + course.courseTitle + " is full.");
        }
    }

    public void dropCourse(Course course) {
        if (registeredCourses.contains(course)) {
            course.drop();
            registeredCourses.remove(course);
            System.out.println(name + " successfully dropped " + course.courseTitle);
        } else {
            System.out.println("You are not registered for " + course.courseTitle);
        }
    }

    public void displayRegisteredCourses() {
        if (registeredCourses.isEmpty()) {
            System.out.println(name + " is not registered for any courses.");
        } else {
            System.out.println(name + "'s Registered Courses:");
            for (Course course : registeredCourses) {
                System.out.println(course.courseTitle);
            }
        }
    }
}

public class CourseRegistrationSystem {
    private List<Course> courses;
    private Map<String, Student> students;

    public CourseRegistrationSystem() {
        courses = new ArrayList<>();
        students = new HashMap<>();
    }

    public void addCourse(String courseCode, String courseTitle, String description, int capacity) {
        courses.add(new Course(courseCode, courseTitle, description, capacity));
    }

    public void addStudent(String studentId, String studentName) {
        students.put(studentId, new Student(studentId, studentName));
    }

    public void displayCourses() {
        System.out.println("\nAvailable Courses:");
        for (Course course : courses) {
            course.display();
            System.out.println();
        }
    }

    public void registerStudentForCourse(String studentId, String courseCode) {
        Student student = students.get(studentId);
        if (student == null) {
            System.out.println("Student not found.");
            return;
        }

        Course course = findCourseByCode(courseCode);
        if (course != null) {
            student.registerCourse(course);
        } else {
            System.out.println("Course not found.");
        }
    }

    public void dropStudentCourse(String studentId, String courseCode) {
        Student student = students.get(studentId);
        if (student == null) {
            System.out.println("Student not found.");
            return;
        }

        Course course = findCourseByCode(courseCode);
        if (course != null) {
            student.dropCourse(course);
        } else {
            System.out.println("Course not found.");
        }
    }

    private Course findCourseByCode(String courseCode) {
        for (Course course : courses) {
            if (course.courseCode.equals(courseCode)) {
                return course;
            }
        }
        return null;
    }

    public static void main(String[] args) {
        CourseRegistrationSystem system = new CourseRegistrationSystem();

        // Add courses
        system.addCourse("CS101", "Introduction to Computer Science", "Learn the basics of computer science.", 30);
        system.addCourse("MATH101", "Calculus I", "Introduction to calculus.", 25);
        system.addCourse("ENG101", "English Literature", "Study classic English literature.", 20);

        // Add students
        system.addStudent("S101", "Alice");
        system.addStudent("S102", "Bob");

        // Menu for user interaction
        Scanner scanner = new Scanner(System.in);
        int choice;
        do {
            System.out.println("\nMenu:");
            System.out.println("1. Display available courses");
            System.out.println("2. Register for a course");
            System.out.println("3. Drop a course");
            System.out.println("4. Display registered courses");
            System.out.println("5. Exit");
            System.out.print("Enter your choice: ");
            choice = scanner.nextInt();
            scanner.nextLine();  // consume newline

            switch (choice) {
                case 1:
                    system.displayCourses();
                    break;
                case 2:
                    System.out.print("Enter Student ID: ");
                    String studentId = scanner.nextLine();
                    System.out.print("Enter Course Code to Register: ");
                    String courseCode = scanner.nextLine();
                    system.registerStudentForCourse(studentId, courseCode);
                    break;
                case 3:
                    System.out.print("Enter Student ID: ");
                    studentId = scanner.nextLine();
                    System.out.print("Enter Course Code to Drop: ");
                    courseCode = scanner.nextLine();
                    system.dropStudentCourse(studentId, courseCode);
                    break;
                case 4:
                    System.out.print("Enter Student ID: ");
                    studentId = scanner.nextLine();
                    Student student = system.students.get(studentId);
                    if (student != null) {
                        student.displayRegisteredCourses();
                    } else {
                        System.out.println("Student not found.");
                    }
                    break;
                case 5:
                    System.out.println("Exiting...");
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        } while (choice != 5);

        scanner.close();
    }
}
